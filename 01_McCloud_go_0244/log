This is the log for Todd McCloud's 2017 Course "Learn How to Code Google's Go Programming Language"

Welcome & Course Overview
Variables, Value and Type
	variadic parameters
		signified by ...<some type>
	type interface
		type interface{} is the empty interface
		everything is of type interface
	...interface{} as a parameter means
		"as many arguments of any type"
	notation for identifier from a particular package
		example
			fmt.Println()
				identifer Println from package fmt
	statement
		statement is the smallest standalone element of a program
	expression	
		combination of one or more:
			explicit values
			constants
			variables
			operators
			functions
		that the programming language interprets and computes

		to PRODUCE ANOTHER VALUE.
Excercises - Ninja Level 1

	Hands-on Exercise #1
		1. Using the short declaration operator, assign these values to variables
		with the identifiers x and y and z
			a. 42
			b. James Bond
			c. true
		2. Now print the values stored in those variables using
			a. a single print statement
			b. multiple print statements

	Solution for Exercise #1: see ninga1_1.go

		package main

		iqnimport (
			"fmt"
			)

		func main () {
			x := 42
			y := "James Bond"
			z := true
			fmt.Println(x,y,z}
			fmt.Println(x)
			fmt.Println(y)
			fmt.Println(z)
		}
	
	Hands-on Exercise #2
		1. Use var to declare three variables, the variables should have
		package level scope. Do not assign values to the variables. Use the following
		identifiers for the variables and make sure the variables are of the following
		type:
			a. identifier "x" type int
			b. identifier "y" type string
			c. identifies "z" type bool
		2. In func main
			a. print out the values for each identifier
			b. the compiler assigned values to the variables. What are these called?

	Solution for Exercise #2: see ninga1_2.go

		package main
		
		import (
			"fmt"
			)
		
		var x int
		var y string
		var z bool
		
		func main () {
			fmt.Println(x,y,z)
		}
					
	Hand-on Exercise #3
		Using code from the previous excercize,
			1. At the package level scope,
			andsissign the following values to the three variables:
				for x assign 42
				for y assign "James Bond"
				for z assign true	
			2. in func main
				a. use fmt.Sprintf to print all of the values to one single string
				Assign the returned value of type string with the identifier s
				b. print out the value stored by variable "s"

	Solution for Excercise #3
	
		package main
		
		import (
			"fmt"
			)
		
		var x int = 42
		var y string = "James Bond"
		var z bool = true
		
		func main () {
			// Sprintf is format printing. 
			// %v is the default for each type, 
			//t%v is tab and then default formatting
			s := fmt.Sprintf("%v\t%v\t%v",x,y,z)
			fmt.Println(s)
			}

	Hands-on Exercise #4 (Sidebar)
		Sidebar; Documentation re "underlying type"
		    Types
			"A type determines a set of values together with operations and methods 
			specific to those values"	
				Type => "set of values".
				Type => "operations (and methods) specific to those values"	
		    Underlying Type
			"Each type T has an underlying Type"
				1. If T is one of the pre-declared 
a					boolean
					numeric
					string
					or a type literal
				    Then the underlying type is the type itself
				2. Otherwise, T's underlying type is the underlying type of the type T referes
				    in its type declaration
			Example of Underlying type
				type (
				   A1 = string
				   A2 = A1
				)

				type (
				   B1 string
				   B2 B1
				   B3 []B1
				   B4 B3
				)
				"the underlying type of 
					string is string
					A1 is string
					A2 is string	
					B1 is string
					B2 is string"

				"the underlying type of
					[]B1 is []B1
					B3 is   []B1
					B4 is   []B1"
	Hands-On Excersise #4 (excersize)
		1. Create your own type. Have the underlying type be int.
		2. Create a Variable of your new type with identifier "x" using the "var" keyword 
		3. in the func main
			a. print out the value of variable "x"
			b. print out the type of variable "x"
			c. assign 42 to the variable "x" using the "=" operator
			d. print out the value fo the variable "x"
	Solution (Hands-on excersize #4)
		package main

		import (
			"fmt"
			)
	
		type spin int
		var x spin

		func main () {
			fmt.Printf("%v%v\n%v%T\n","the value is ",x,"the type is ",x)
			x = 42
			fmt.Printf("%v",x)
			}			
	Hands-on Excersize #5
		1. building on the code from the previous excersize, at the package level scope,
		using the "var" keyword, create a variable with identifier "y". The variable should be 
		of the underlying type of your custom type "x".
		2. in the func main,now do this
			a. use conversion to convert the type of the value stored in "x" to the underlying
			type
			b. then use the "=" operator to assign that value to "y"
			c. print out the value stored in "y"
			d. print out the type of "y"
	Solution:
		package main
		import (
			"fmt"
			)
	
		type spin int
		var x spin
		var y int

		func main () {
			x = 42
			y = int(x)
			fmt.Printf("%v%v\n%v%T\n","the value of y is ",y,"the type of y is ",y)
			}
			
	Hands on Exersize #6: Take this Quiz

	1. The smallest stand alone element of a program tha expresses some action to be carried out.
		[x] statement
		[ ] expression
	2. A combination of one or more explicit values, constants, variables, operators, and functions
	    that the programming language interprets and computes to produce another value.
		[ ] statement
		[x] expression
	3. Which are "parentheses" or "parens"
		[x] ()
		[ ] {}
		[ ] []
	4. Which are "curly braces" or "curlies" or "braces"
		[ ] ()
		[x] {}
		[ ] [] 
	5. Which are "brackets".
		[ ] ()
		[ ] {}
		[x] []
	6. The scope of the variable is where you can access the variable, eg write to it or read the 
	    value from it.
		[x] true
		[ ] false
	7. A "primitive" data type is one that is built into the language and/or just a basic data type 
	    that is built into the language
		[x] true
		[ ] false
	8. In Go, an "int" is a primitive data type.
		[x] true
		[ ] false
	9. In Go, a "string" is a primitive data type.
		[x] true
		[ ] false
	10. A "composite" data type allows you to compose together values of other data types.
		[x] true
		[ ] false
