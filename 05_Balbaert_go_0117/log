This is the log for Ivo Balbaert's 2012 book "The Way to Go"
Copyright Page
Preface
Chapter 1 - Origins, Context and Popularity of Go
Section 1.1 Origins and Evolution
	Go on Google App Engine Group
	Go Linked in Group 
Section 1.2 Main Characteristics, Context and Reasons for Developing a New Language
Chapter 2 - Installation and Runtime Environment
Section 2.1 Platforms and Architectures
Section 2.1 Platforms and Architectures, Continued
Section 2.2 Go Environment Variables
Section 2.3 Installing Go on a Linux System
	On a Linux system, set the variable in your shell profile, which is
		$HOME/.bashrc file or the $HOME/.profile
			export GOROOT=$HOME/go
			export GOBIN=$GOROOT/bin
			export GOARCH=amd64
			export GOOS=linux
			export PATH=$GOBIN:$PATH
			export GOPATH=$HOME/goprograms or export GOPATH=$GOROOT
			
			$HOME is /home/user1 if you are logged in as user1
			export GOPATH=$GOPATH:
			
			GOPATH may be set to a colon-seperated list of paths inside which
			 	Go Source code, package objects, and executables may be found
Section 2.4 Installing Go on an OS X System
Section 2.5 Installing Go on a Windows System
Section 2.6 What is installed on your machine
Section 2.7 The Go runtime
Section 2.8 A GO Interpreter
Chapter 3 - Editors, IDE's anbd Other Tools
Section 3.1 Basic Requirements for a Decent Go Development Environment
Section 3.2 Editors and Integrated Development Environments
Section 3.3 Debuggers
Section 3.4 Building and Running Go-programs with command and Makefiles
Section 3.5 Formatting Code: gofmt
	go fmt imposes the offical "standard code formattin and style" on the Go source code
		A syntax level rewritting tool
		A simple form of refactoring
		Example: (command line)
			gofmt -w anyprogram.go  where the -w safes the changes
			gofmt -w *.go works on all go files
			gofmt map1 works on all go files in map 1 directory and its subdirectories
Section 3.6 Documenting code: godoc
	godoc extracts and generates documentation for Go Programs and Packages
		extracts comments that appear before the top level declarations in the source code
		example:
			godoc package
Section 3.7 Other Tools
Section 3.8 Go's Performance
Section 3.9 Interactions with Other Languages
Part 2 Coure Constructs and Techniques of the Language
Chapter 4 - Basic Constructs and Elementary Data Types
Section 4.1 Filenames - Keywords - Identifers 
Section 4.2 Basic Structure and Components of a Go Program
	Packages - "Packages are a way to structure code: a program is constructed as a "package" 
			which may use facilities from other packages."
	Standard Library
	Importing - "A go program is created by linking together a set of packages through the import keyword."
	"Factoring the Keyword"
		import (		// The Keyword
			"fmt"		// The Factors
			"os"
			)			
		
		instead of 
		import "fmt"; import "os"
	Discussion of the Compile Process
		"To build a program, the packages and the files within them, must be compliled in the right order."
		"Within a package, the source files must all be compiled together"
		"Import loads the public declarations from the complied package, it does not insert the source code."
	VIsibility Rule
		"When the identifier starts with Uppercase letter, then the 'object' with this identifier is 'visible outside the package'".
		" ... and is sead to be exported"
	Dot notation
		if Thing is a variable (or function ) from package pack1, then Thing can be called with pack1.Thing 
	Namespaces
		basically this means that pack1.Thing is completely different from pack2.Thing .  
	Package alias 
		A package can be given another name (an alias).
		Example of a package alias:
			package main
			import fm "fmt"   // this gives the alias fm to the package fmt
			func main() {
			fm.Println("hello, world")	// insterad of fmt.Println("hello, world")
			}
	Package Level Declarations and Initializations

			package main			// package declatation
			import (			// import declarations
				"fmt"
				"os"
				)	
			const a int			// contant declaration; package level scope
			var b bool			// variable declarations; package level scope
			type cat string			// type declaration; package level scope
	Functions	
		Function General Format:
			Simplist Function:	func functionName() 	
			// between the (), no, one or more parameters can be given as input to the function
		"func main() will always be first function called AND the program exits when main returns."
		Schematic General Function
			func funcName() (parameter_list) (return_value_list) {
					...
				}      // where paramenter list is (param1 type1,param2 type2,...)
					// return_value_list is (ret1 type1, ret2 type2,...)
	Example
		package main
		import (
			"fmt"
			)
		func main() {
		fmt.Println("hello, world") // calls the function Println from the package fmt,
		}				// which prints the string-parameter to the console,
						// followed by a newline-character \n
		

			
