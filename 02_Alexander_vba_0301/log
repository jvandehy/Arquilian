This is the log for Michael Alexander's 2016 Book "Excel 2016 Power Programming with VBA"
Copyright page
About the Authors/Editors/Credits
Table of Contents
List of Illustrations
Introduction
	Topics covered
		Visual Basic for Applications ("VBA")
		VBA  is the programming language built into Excel
		This book ..."shows you how to write programs that automate various tasks in Excel"
	What you need to know
	What you need to have
	Conventions in this book
		Excel Commands
			"context sensitive Ribbon menu system"
		Visual Basic Editor Commands
			Visual basic Editor is the window in which you work with your VBA code.
	How this book is organized
Part 1 Introduction to Excel VBA
Chapter 1 Essentials of Spreadsheet Application Development
	What is a Spreadsheet Application
		"spreadsheet file (or group of related files) that is designed so that:
			 someone other than the developer can perform useful work without extensive training"
	A good spreadsheet application
	Steps for Application Development
		Determining User Needs
		Planning an Application that meets user needs
		Determining the Appropriate User Interface
			Customizing the Ribbon
			Customizing Shortcut Menus
			Creating Shortcut keys
			Creating custom dialog boxes
			Using AtiveX controls on a worksheet
				Excel lets you add userform ActiveX controls to
					worksheets "drawing layer"
				Drawing layer is an invisible layer on top of a sheet that holds 
					pictures, charts and other objects.
				Active X controls let the user make choices by operating familiar controls
			Controls come in two types
				Form Controls (Easier to Use)
				Active X Controls (More Flexible)
		Concerning Yourself with the End User
		Testing the Application
		Making the application bulletproof
			Locking Cells / Objects
			Hiding Formulas
			Protecting Workbook
			Passwords
		Making the applicaiton aestetically appealing and intuitive
			Consistancy
			Keep it simple
		User Help System
		Documentation
		Distribution
		Updating
Chapter 2 Introducing Visual Basic for Applications
	Getting a head start with the Macro recorder
		"A macro is essentially VBA code that you can call to execute any number of actions."
		"A recorded macro is technically no different from a VBA procedure you create manually."
	Creating your first macro
		1. Developer Tab -> "Record Macro"
 			// starts the "Macro Recorder" and activates the "Record Macro" dialog box
		2. Enter a single-word name for the macro (for example MyName )
		3. Assign the macro to the shortcut key (for example Ctrl+Shift+N)
		4. Click the OK button
			// closes the "Record Macro" dialog box
			// begins the recording of your actions
		5. Select any cell on your Excel Spreadsheet, and type in something (for Example "Jeff"), then Enter.
		6. Developer tab -> "Stop Recording"
			// this creates a macro in a new module named "Module1" 
	Examining your first macro
		7. Open the Visual Basic Editor Developer -> Visual Basic
		8. Examine the "Project Window" for a list of open workbooks and addins
		8b. (This can be done by View -> "Project Explorer" if the defalut window doesnt appear.
		9. Expand the Window to make Module1 visible.
		10. Double click Module1.
			// the code in the module appears in the "Code Window"
	
	Code of first macro
		Sub MyName()
		'	
		' MyName Macro
		'	
		' Keyboard Shortcut: Ctrl+Shift+N
		'
		' ActiveCell.FormulaR1C1 = "Jeff"
		End Sub

	Testing the Macro
		Return to Excel and Activate a worksheet
		Select a cell and press Ctrl+Shift+N
		Your name should be entered into the cell

	Editing the macro
		insert
			ActiveCell.Font.Bold = True
			// This makes the text bold when the macro is used. 

	Comparing absolute and relative macro recording
	Excel has two modes for recording
		1. Absolute Reference
			Excel's default recording mode is absolute reference
			absolute refence means "it does not automatically adjust when the formula is pasted into a new location"
		2. Relative Reference	
	Macro Example: "Absolute Reference"
		Recording The Macro (this is done using the spreadsheet "Sample.xlsm", but any spreadsheet with text in column D would work)
			Select Cell A1 (Before recording)
			Developer Tab => Record Macro => Record Macro Menu
				Name => "AddTotal"
				Save Location => "This Workbook"
				=> OK
			// at this point Excel is recording your actions
			While Recording
				Select Cell A16; type "Total" in Cell A16
				Select Cell D16 and type "=COUNTA(D2:D15)
				// This gives a  count of the number of cells that have text in them 
			Developer Tab => "Stop Recording"
			// The Sample.xlsm Spreadsheet has the value "14" in Cell D16, as expected.
		Testing the Macro
			By deleting the row 16, we can remove the desired text and formulas from the sheet.
			Then by running the macro;
				Developer Tab => Macros => Macro name "AddTotal" => "Run"
			Result:  The correct label and total in cell D16 appears on line 16'
		Code Examination (Macro "AddTotal")
			Developer Tab => Macros => Macro name "AddTotal" => "Edit"
			// This opens the Visual Basic Editor
				Sub AddTotal()
				  Range("A16").Select			// when asked to select cell range A16, 
									// thats what it did
				  ActiveCell.FormulaR1C1 = "Total"   
				  Range("D16"). Select			// when asked to select cell range D16,
									// thats what it did
				  ActiveCell.FormulaR1C1 ="=COUNTA(R[-14]C:R{-1}C)"
				End Sub		
				// because the macro was recorded in "absolute" reference mode,
				//    Excell interpreted your range selection as "absolute"

			//notice no references to any specific cell ranges	

	Macro Example: "Relative Reference"
		Recording the Macro (again using the Sample.xlsm file or similar)
			Developer Tab => "Use Relative References"
			Select Cell A1 (Before Recording)
			Developer Tab => Record Macro => Record Macro Menu
				Name => "AddTotalRelative"
				Save Location => "This Workbook"
				=> OK
			// at this point Excel is recording your actions
			Select cell A16 and type "Total" in the cell
			Select cell D16 and type "=COUNTA(D2:D15)"
			Developer Tap => "Stop Recording"
		Testing the Relative Macro
			So the Relative Macro works when starting at A1 as expected,
			but also works when started on F1 (Totaling the Data in column I)
		Code Examination (Relative Reference Version)
			// Again get to the Visual Basic Editor

			Sub AddTotalRelative()
				ActiveCell.Offset(15,0).Range ("A1").Select
				ActiveCell.FormulaR1C1 = "Total"
				ActiveCell.Offset(0,3).Range ("A1").Select
				ActiveCell.FormulaR1C1 ="=COUNTA(R[-14]C:R[-1]C)"
			End Sub
			// note: no specific cell ranges
			// ActiveCell.Offset tells the curser to move a certain number up/down and left/right
		In Practice
			to use this macro, just need to ensure
				1. selected the correct starting cell
				2. the data block has same number of rows and columns as the original data

	Other Macro Recording Concepts
		Macro Enabled File Extensions
			.xlsx can not contain macros
			.xlsm can contain macros
		Macro Security in Excel
			Trusted Documents
				"Enable Active Content" => "Trusted Document"
		Trusted Locations
			Developer Tab => "Macro Security" => "Trust Center Dialog Box" => "Trusted Locations" 
			    => Trusted Directories => New Location
			Files in Trusted Locations Automatically have Macros Enabled
		Personal Macro Workbook
			"General Purpose Macros can be stored in the 'Personal Macro Notebook" instead of "This Workbook"
		Assigning a Macro to a Button (and other Form Controls)
			Form Controls - "You want to have a clear and easy way to run macros" => Form Controls
				Different Types of Form Controls
					Buttons
					Scrollbars
 				Using  A Form Control in General
					Place a Form Control on a Spreadsheet and then assign a macro to it.
			Example: Creating a Form Control for "AddTotalRelative" Macro
				Developer Tab => "Insert Button" => "Drop Down List" => "Button Form Control"
				CLick Location on the sheet where you want the button => (Automatically Opens) 
	    			    "Assign Macro Dialog Box" => "AllTotalReRelative"
			Assigning Other Form Controls to Macros: All the other Form Control Selections (besides 
			    "Button") are assigned the same way
		Form Controls vs ActiveX controls
			Form Controls are designed specifically for use on a spreadsheet.
			ActiveX Controls are typically used on Excel User Forms
			General Rule:
				Use Form Controls when working on a spreadsheet
					-because Form Controls use less "overhead", therefire they perform better
		Quick Access Tool Bar
			"You can also assign a macro to a button in Excels Quick Access Tool Bar"
			Add a custom button that will run your macro by
				1. Right Click the "Quick Access Tool Bar" => "Customize Quick Access Toolbar"
				2. This opens the Dialog Box. Click the "Quick Access Toolbar Button" on the left of
				    the Excel Options dialog box.
				3. "Choose Commands" => "Macros". 
				4. Select the Macro you want to add and click the "Add" button
				5. Change the icon by clicking the modify button
				6. Click "OK"
	Working with the Visual Basic Editor
		A Seperate Application
		    Visual Basic Editor is actually a seperate application that runs when you open Excel
		Activation of the Visual Basic Editor:
		    1. Alt +F11 (when Excel is active)
	       	    2. Devloper Tab => "Visual Basic"
		Understanding VBE Components
		    VBE Program Window
		    	Menu Bar
				"works like any other menu bar"
				Shortcut keys assocoiated with them
			Toolbar
			Project Window
				tree diagram
			Properties Window
			Code Window
				contains the VBA code
			Immediate Window
				useful for executing VBA statements directly
		    Working with the Project Window
			Each Excel Workbook and add-in that's open is a project.
			Project == a collection of objects arranged as an outline
			Adding a new VBA Module
				1. Automatically
					"When you record a macro. Excel automatically inserts 
					    a VBA module to hold the recorded code"
					"Its location depends on where you chose to store the recorded macro"
			VBA Modules can hold three types of code:
				1. Declarations
					"Information statements that you provide to VBA"
					Examples:
						Declare Data Type
						Set module-wide Options
				2. Sub Procedures
					"A set of programming instructions that performs some action"
					Example:
						all recorded macros will be sub procedures
				3. Function Procedures
					"A set of Programming instructions that returns a single value"
			"A single VBA module can store any number of Sub procedures, Function procedures,
			    and declartions."
		
			How to Add a new VBA module to a project:
			    	1. Select the project's name in the Project window.
				2. Choose Insert => Module
			How to remove a VBA module:
				1. Select the module's name in the Project window
				2. Choose File -> remove xxx where xxx is the module name

		Working on the Code Window
			Minimizing and Maximizing windows
			Multiple Windows
				Switch with Ctrl+Tab

		Getting VBA Code into a module
			1. Use the Excel macro recorder to record your actions and convert them to VBA code
			2. Enter code directly
			3.Copy code from one module and paste it into another

		Line Contination
			"A single line of code can be as long as you like."
			"However, you may want to use the line-continuation character to break up lengthy 
			    lines of code"
			To continue a statement from one line to the next, end the first line with a space
			    followed by an underscore (_). The continue the statement on the next line.
			Example:
				Selection.Sort Key1:=Range("A1"), _
				    Order1:=x1Ascending, Header:=x1Guess, _
				    Orientation:=x1TopToBottom
		Undo and Redo
			Undo : Ctrl Z or "undo" button
			Redo : "redo" button

	Entering "Real Live Code"
		Steps
		1. Create a new workbook in Excel
		2. Activae the editor ("VBE") via Alt+F11
		3. Click the new workbook's name in the Project window
		4. Choose Insert => Module to insert a VBA module into the project
		5. Type the code into the module
			Sub GuessName() 
			    Dim Msg as String
			    Dim Ans As Long
			    Msg = "Is your name" & Application.UserName &"?"
			    Ans = MsgBox(Msg, vbYesNo)
			    If Ans = vbNo Then MsgBox"Oh, never mind"
			    If Ans = vbYes Then MsgBox"I must be clairvoyant!"
			End Sub
		6. Make sure the cursor is located anywhere within the text you typed and press F5
		    to execute
