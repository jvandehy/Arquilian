This is the log for Thomas Nield's 2016 book "Getting Started with SQL: A Hands on Approach for Beginners"
Copyright page
Foreword
	"an accessable and easy-to-read discussion of SQL - a core database technology
Preface
	"This book will give you a practical focus on using SQSL, and will steer you 
	away from unnecessary technical details"
Acknowledgements
Chapter 1 Why Learn SQL
	"Structured Query Language"
	SQL is a universal language to work with data on database platforms
Chapter 2 Databases
Section What is a DataBase
	"Database" - anything that collects and holds data
	RDBMS - Relational Database Management System
Section Exploring Relational Databases
	Example
		ORDER table refers to CUSTOMER table for customer information
			ORDER Table
				has field called CUSTOMER_ID
			Example:
				ORDER_ID	ORDER_DATE 	SHIP_DATE 	CUSTOMER_ID
				3		2015-04-23	2015-04-23		5
				4		2015-04-18	2015-04-22		4

			CUSTOMER table 
				holds the customer information for each customer id.
			Example:
				CUSTOMER_ID 	NAME		REGION 	  	STREET ADDRESS
				1		Lite Industrial	Southwest	729 Ravine Way
				2		Rex Tooling	Southwest	6129 Collie Blvd
		When we go through the ORDER Table, we can use the CUSTOMER_ID to look up the customer information
		in the CUSTOMER Table

	Relational Database - tables have fields that point to information in other tables
	Normalization 	- seperating the different types of data into their own tables
			(rather than putting them in one table)
		    	- avoids redundancy, "bloating", maintanance issues
Section Why Separate Tables
Section Choosing a Database Solution
	Lightweight Database
		Users - One to a small number
		Overhead - None or little
		Examples of Lightweight Database solutions
			SQLite
			Microsoft Access
	Centralized Database
		Users -  tens, hundreds othousands of users
		Servers - Centralized Databases run on servers
			- client requests, server gives it up!
		Examples - 
			MySQL
				highly recomended, open source, free to use, straightforward to install and set up.
				used by Facebook, Google, eBay, Twittter 
			PostgreSQL
			MariaDB
			Others (Microsoft SQL Server, Oracle, IBM DB2)
		You install these solutions onto a computer, and turn that computer into a server
		
	Universal aspects 	
		"the experience betseen different database solutions should be largely the same."
Chapter 3 SQLite
Section What is SQLite
Section SCLiteStudio
	an SQL editor
	install from sqlitestudio.pl
Section Importing and Navigating Databases
	Data Types
		Integer
		Text
		Datetime
		Boolean
		Decimal
Chapter 4 Select (Statement)
Section Retrieving Data with SQL
	Select Statement
		Most Common -  retrieve and display data
		"far more" - transform data; build summaries
		Example: (Select all columns of a table)
			SELECT * FROM CUSTOMER;
			// This runs a query and displays the results
			// SELECT allows you to choose which columns to pull from a table
			// * is a placeholder to specify "all columns"
			// CUSTOMER is the name of the table being queried
		Example: (Select specific columns of a table)
			SELECT CUSTOMER_ID, NAME FROM CUSTOMER
Section Expressions in SELECT Statements
	Calculations
		"Generate a calculated column"
		Example:
			SELECT
			PRODUCT_ID,
			DESCRIPTION,
			PRICE,
			PRICE * 1.07 AS TAXED_PRICE  	// PRICE is multiplied by 1.07 to calculate TAXED_PRICE
							// we gave the calcluated value a name using an AS statement
							// AS statements give aliases
			FROM PRODUCT;
		// notice in the SELECT statement that we can spread our SQL across multiple lines to make it more readible
		Result (partial)
			PRODUCT_ID	DESCRIPTION	PRICE		TAXED_PRICE
			1		Copper		7.51		8.0357
			2		Aluminum	2.58		2.7606
			3		Silver		15		16.05 	
		// the TAXED_PRICE column was dynamically calculated in the SELECT query
		// the TAXED_PRICE column is not stored i n the table, but calculated and displayed every time we run query
	
	Aliases
		Assigned by AS statements
		We can use AS statements to 
			give names to expressions
			apply a new name to an existing column within the query
		
	Calculations - "Keep the stored data simple and use queries to layer calculations on top of it"

	Rounding
		Instead of 
		PRICE * 1.07 AS TAXED_PRICE
		use
		round(PRICE * 1.07, 2) AS TAXED-PRICE
	
Section Text Concatination
	"Concatination merges two or more pieces together"
	Example
		NAME			CITY	STATE 	ZIP
		LITE Industrial		Irving  TX	75014
		Rex Tooling		DallaS  TX	75201
		Re-Barre Construction	Irving	TX	75032

	Query:

	SELECT NAME,
	CITY || ',' || STATE AS LOCATION
	FROM CUSTOMER
			
	Query Result:	
			
		NAME			LOCATION
		LITE Industrial		Irving, TX
		Rex Tooling		DallaS, TX
		Re-Barre Construction	Irving, TX
		
	Example concatination of numbers
	Query:
	SELECT NAME,
	CITY || ',' || STATE || ',' || ZIP AS LOCATION	
	FROM CUSTOMER;

	// Concatination should work with any data type (numbers, dates, etc)
		and treat it as text when merging. ("implicit converstion")

Chapter 5 Where
	Where Statements
	"A very common task when working with data is filtering for records based on criteria,
	which can be done by WHERE statements."

Section Filtering Records
Section Using WHERE on NUmbers
	Example
		SELECT * FROM station_data
		WHERE year = 2010;

	Example
		SELECT * FROM staion_data
		Where year != 2010

	Example 
		SELECT * FROM station_data
		WHERE year BETWEEN 2005 and 2010

Section And, Or and In Statements
	Example
		SELECT * FROM station_data
		WHERE year >= 2005 AND year <= 2010

	Example 
		SELECT * FROM station_data
		WHERE MONTH =3
		OR MONTH = 6
		OR MONTH = 9
		OR MONTH = 12
	
	Example
		SELECT * FROM station_data
		WHERE MONTH IN (3,6,9,12)

	Example 
		SELECT * FROM station_data
		WHERE MONTH NOT IN (3,6,9,12)

	Example
		SELECT * FROM station_data
		WHERE MONTH %3 =0    // that is, 3,6,9,12		
	
Section Using WHERE on Text
	"...when using text, you must wrap literals (text values you specify) in quotes."
	Example
		SELECT * FROM station_data
		WHERE report_code = '513A63'   // report_code field is text

	Single Quote Rule: "If a field is text, we need to put single quotes around the spcified text."		
