This log is for Matt Butcher's 2018 book "Go in Practice"

Copyright Page
Table of Contents
Foreword 
	This book is intended to be spiritual successor to "Go in Action"
Preface
Acknowledgements
About this Book
About the Authors
About the Cover Illustration
Part 1 Background & Fundamentals
1.0 Chapter 1 Getting into Go
1.1 What is Go
	The layers of Go:
		Innermost layer: A Programming Language
		Middle layer: A Development Tool Chain
			Testing
			Documentation
			Formatting
		Outer layer: An Ecosystem
			Built in Package Management
			Third Party Libraries
1.2 Noteworthy Aspects of Go
	Multiple Return Values
		Example (with returns "unnamed")
			package main
			import (
				"fmt"
			)
			func Names (string, string) {     // two strings defined for return
				return "Foo", "Bar"      // two strings are returned
			}
			func main () {
				n1, n2 := Names()	// variables get two values
				fmt.Println(n1, n2)
				
				n3, _ := Names()	// gets first return value and skips second	

				fmt.Println(n3)
			}
		Example (with returns named)
			// you can name returns and work with them the same way you do variables
			package main
			import (
				"fmt"
			)
			func Names (first string, second string) {      // two strings (with names) defined as return variables
				first = "Foo"
				second = "Bar"      			// values assigned to named return variables
				return					// return is called with no values
			}
			func main () {
				n1, n2 := Names()			// variables ase filled with values
				fmt.Println(n1, n2)
			}
			
	A Modern Standard Library
		Networking - Building applications in  a networked world means applications need to work both as:
			Client (Clients connect to other networked devices) 0r
			Server (Server are for other applications to connect to)
		Example of Common Networking Setups:
			HTTP
			TCP (Transmission Control Protocol)	
			UDP (User Datagram Protocol)
		Example (read TCP status)
			package main
			import (
				"bufio"
				"fmt"
				"net"
			)

			func main () {
				conn, _ := net.Dial("tcp","golang.org:80")     // connects over TCP
								               // connecting directly to a port is part of the net package
									       // Dial function connects using the type and endpoint specified
									       // in this case, Dialmakes a TCP connection to golang.org on port 80
				fmt.Fprintf(conn, "GET / HTTP/1.0\r\n\r\n")    // sends string over connection
									       // over the connection, a GET request is sent
				status, _ := bufio.Newreader(conn).ReadString('\n')
				fmt.Println(status) 				// prints the first response line
			}

			// Listen (also in net package) can be used in a similar manner
			// Listen is used to "listen" on a port and act on incoming connections

		Common Case of Networking
			HTTP
			REST (Representational State Transfer)
			web servers
		
			To handle this common case Go has the http package
				http package provides both:
					a client
					a server
			Example of using the http package: (HTTP GET: http_get.go)
				package main
				import (
					"fmt"
					"io/ioutil"
					"net/http"
				)
				
				func main() {
					resp, _ := http.Get("http://example.com/")	// makes a HTTP GET request
					body, _ := ioutil.ReadAll(resp.Body)		// reads the body from the response
					fmt.Fprintln(string(body))			// prints the body as a string
					resp.Body.Close()				// closes the connection
					}
				// This example shows how to print the body of a simple HTTP GET request.
		HTTP CLient 
			Simple GET requests
			Deal with proxies
			perform TLS handling
			set Headers
			handle cookies
			create client objects
			swap out the transport layer
		HTTPS Server
		HTML
			html package
				escaping and unescaping HTML
			html/template package
				creating re-usable HTML templates
		Cryptography
			hashes
			encription of data
		Data Encoding
			base64 encoding
			JSON (Javascript Object Notation)
			XML (Extensible Markup Language)
			"Internally, Go is entirely handled as UTF-8"
			"But not everythimg passed around between systems is UTF-8, and you have to deal with data formats
			that add meaning to the text"
			" ... go packages provide the ability to turn a JSON string into instantiated objects"
			" ... go interfaces provide a way to switch between encodings ..."		
		Concurrency with goroutines and channels
			Goroutine "a function that can be run concurrently to the main program or other goroutines"
			Illustration:
				Concurrent Output
				A go routine thatcounts from 0 to 4 while the main program prints "Hello World" concurrently
					1	0
					2	1
					3 	Hello World
					4	2
					5	3
					6	4
				This printed output is a mix of two functions printing concurrently.
			Example: Printing Concurrently
				package main
				 
				import (
					"fmt"
					"time"
					)

				func count () {
					for i := 0; i< 5; i++ {				// function to execute as goroutine
						fmt.Println (i)
						time.Sleep(time.Millisecond * 1)
					}
				
				func main()  {
					go count()					// starts goroutine
					time.Sleep(time.Millisecond * 2)
					fmt.Println("Hello World")
					time.Sleep(time.Millisecond * 5)
					}
					
					// the count function is a normal function that counts fro 0 to 4
					// to run count in parallel rather than in order, use the go keyword
					// both main and count execute concurrently
		Channels
			Channels provide a way for two goroutines to communicate with each other
			By default, they block execution, allowing goroutines to synchronize

			Illustration:
				Passing variables between goroutines via a channel

					GOROUTINE   =>	CHANNEL   =>	GOROUTINE     	STEP
					Instance					"A goroutine has an instance of a type"
							Instance			"The goroutine passes the instance into a channel"		
									Instance	"The Channel passes the instance into another goroutines"
			Example "Using Channels"
				package main

				import (
					"fmt"
					"time"
					)

				func printCount (c chan int) {		// an int channel passed in
					num := 0
					for num >= 0  {
						num = <-c		// waits for value to come in
						fmt.Print(num, " ")
						}
				func main ()  {
					c := make (chan int)		// a channel is created
					a := []int {8, 6, 7, 5, 3, 0, 9, -1}

					

