 This is the log for David Flanagan's 2011 Book "JavaScript: The Definitive Guide" (Manning)
Table of Contents
A Note Regarding Supplemental Files
Preface
Chapter 1. Introduction to Javascript
Section Introduction
	JavaScript "behavior of web pages"
	JavaScript
		high-level
		dynamic
		untyped
		interpreted
	JavaScript Core Language
		a minimal API forworking with 
			text
			arrays
			dates
			regular expressions
		host environment provides:
			input & output
			features
				networking
				storage
				graphics
		host environment is usually a browser (client side javascript)
	Javascript Interpretors
		every web browser
			embed within <script> tags in HTML files
			browser "Web Developer Tools"	
		 simple console API
Section Core JavaScript
	Lexical Structure:
		comments
		semicolons
		Unicode charactor set
	Types. Values. Variables
		a variable is a symbolic name for a value
		var keyword
			var x;   // declare a variable named x
		assignment
			values can be assigned with the "equals sign", =
			x = 0;  //now the variable x has the value 0.
		types of values
			Integers -just one type for integers and real numbers
			Strings
			Boolean
			null
		Objects
			Objects are javascripts most important type
			Objects is a collection of
				name/value pairs
				a string to map value
			Object example
				var book {
					topic : "javascript",	// the property topic has the value "javascript"
					fat : true		// the property fat has value true
				}
			Objects values can be accessed
				book.topic                      // => "javascript"
				book["topic"]			// => "javascript"
			Objects can have new properties created by assignment
				book.author = "Flanagan"
			Objects can be empty
				book.contents = {};
			Objects can hold Arrays
				var data = {			// an array with two properties 
					trial1: [[1,2],[3,4]],
					trial2: [[2,3],[4,5]] 	// each property is an array
								// the elements of the arrays are arrays
					}
		Arrays
			Arrays are numerically indexed lists of values
			Arrays Example
				var primes = [2,3,5,7];		// an array of 4 values
			Arrays Indexed to 0
				primes[0] = 2;
			Arrays have length
				primes.length = 4;
			Arrays indexed to last element
				primes[primes.length - 1];
			Arrays can have values added by assignment			
				primes[4] = 9;
			Arrays can have values changed by assignment
				primes[4] = 11;
			Arrays can be empty
				var empty = [];
			Arrays can hold objects
				var points [		// an array with two elements
					{x:0, y:0},
					{x:1, y:1}	// both elements are objects
					]
		Expressions
			An Expression is a phrase of javascript that can be evaluated to produce a value
			An Initializer Expression is a syntax for listing array elements within 
				square braces or
				curly braces
			Expressions use operators
			Operators act on operands to produce new values
				Arithmatic Operators
					addition, subtration, multiplication, division
				Concatonation
			Shorthand Operators
				var count = 0 	// defines the variable count
				count++		// increments the variable count 
				count--		// decrements the variable count
				count += 2	// add to count (add 2 in this case)
				count *= 3	// multiply count (multiply by 3 in this case)
			Equality and Relational Operators
				starting out with var x =2, y =3
				x == y		// => false: "equality" operator
				x != y		// => true: "inequality" operator
				x < y		// => true: "less-than" operator
				x <= y		// => true: "less-than or equal-to" operator
				x > y		// => false: "greater-than" operator
				x >= y		// => false: "greater-than or equal-to" operator
			Logical Operators
				(x == 2) && (y ==3) 	// => true; && means "and"
				(x > 3) || (y < 3) 	// => false; || means "or"
				!(x == y)		// => true; ! "inverts" the bollean value
		Statements
			"...an expression is something that computes a value, but doesn't do anything..."
			"Statements ... don't have a value, but do alter a state ..."

			Example of statments
				variable declarations
				assignment statements
				control structures
					conditionals
					loops	
		Functions
			"A function is a named and parameterized block of code that you define once 
			and can invoke over and over again."
			
			Example (function plus1)
			function plus1(x) { 		// define a function named "plus1" with parameter "x"
				return x+1;		// return a value one larger than the value passed in
				}			// functions are enclosed in curly braces

			plus1(y)			// => 4 when y is 3		

			Example (function square)
			var square = function(x) {	//functions are values; can be assigned to variables
				return x*x		// compute the function's value
				};			// Semicolon marks the end of the assignment
			
			square(plus1(y))		// => 16; invoke two functions in one expression

		Methods 
			"When we combine functions and objects, we get methods"
			"All javascript objects have methods"
			
			Example of Method
			var a =[];			// create an empty array
			a.push(1,2,3);			// the push() method adds elements to an array
			a.reverse();			// another method: reverse order of the elements

		Defining Methods
			points.dist = function() {	// define a method to determine distance betwn points
			var p1 = this[0]		// first element of array we're invoked on
			var p2 = this[1]		// second element of array we're invoked on
			var a = p2.x-p1.x;		// difference in X coordinates 
			var b = p2.y-p1.y;		// difference in Y coordinates
			return Math.sqrt(a*a + b*b)	// the pythagorean theorum
							// Math.sqrt() computes the square root

		Functions with Control Structure Statements
			Example 
			function abs(x) {		// a function to compute the absolute value
				if (x >= 0) {		// The if statement
					return x;	// executes this statement if the comparison is true
				}			// this is the end of the clause
					else {		// the optional else clause executes its code if the comparison is false
					return -x;	
					}
				}

			Example
			function factorial(n) {		// a function to compute factorials
				var product =1;		// start with a product of 1
				while(n>1) {		// repeat statements in {} while expression in () is true
					product *=n;	// shortcut for product = product *n		
					n--;		// shortcut for n = n-1
				}			// end of loop
				return product;
				}
				
				factorial(4) 		// => 24

			Example 
			function factorial2(n) {	// another version using a different loop
				var i, product = 1;	// start with 1
				for (1=2; i <= n; i++)	// automatically increment i from 2 up to n
				product *=i		// do this each time. {} not needed for 1-line loops
				return product;		// return the factorial
				}
				
				factorial2(5)		// => 120
		Object Oriented
			Example 			// simple example that demonstrates how to define a javascript class
							// "Objects that are instances of this class have a single method
							//  named r() that computes the distance of the point from the origin"			
